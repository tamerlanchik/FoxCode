Классической архитектурой мобильных приложений
является MVC: Model-View-Controller

Основой Android-приложения является Activity (в нашем случае оно зовется MainActivity)
Оно является владельцем текущего потока, в котором выполняется её интерфейс
и все связанные с ней контекстом (Context) задачи. Как правило, в приложениям
есть несколько Activity, каждое выполняет какую-то отдельну задачу и имеет
персональный дизайн. У нас пока одно.

View - графическая часть приложения. Она отображает необхожимую информацию
и интерактивно взаимодействует с пользователем. Выполняется в одном потоке с Activity.
Представлена файлами макета ***_layout.xml (основной - activity_layout.xml)

GLMap (MaiImageView) - элемент View, на котором будет рисоваться карта,
и который впоследствии будет позвоять выбирать на нём кабинеты. На данном этапе это просто картинка.

MapDrawer - будет заниматься отрисовкой, сдвигом элементов карты и позволять выбирать на себе обьекты. 
Хранит координаты опорной точки экрана и масштаб своей системы координат относительно экранной 
(пока что отрисовываем все элементы карты вне зависимости от того, видно ли их)

MapGuide - класс, который заведует маршрутами (там будет алгоритм поиска пути).
Должен по идее выполняться в персональном потоке, чтобы не повесить интерфейс.

MapItem - примитивный обьект, рисуемый на карте (комната, коридор, лестница и тд.)
Знает свое местоположение, размеры и умеет рисовать себя на предоставленной канве.
Абстрактный класс, ибо каждый тип обьектов рисуется по особому (лестница, как минимум).

ItemsStorageSinglet - класс-хранилище примитивных карточных обьектов.
В Android каждый обьект имеет время жизни, совпадающее с таковым у своего владельца.
По умолчанию владельцем всего является текущее Activity. Но оно в течение жизни приложения
может уничтожаться и создаваться заново. Чтобы данные не потерять и не загружать заново,
мы связываем хранилище с самим приложением. Сколько живет приложение, столько живут данные.
Для отрисовки не столь важно, в какой структуре данных хранятся примитивы. Если этот класс будет 
единственным хранилищем, тогда это будет часть графа.

DatabaseMaster - класс, который предоставляет высокоуровневый интерфейс для работы с базой.
Также занимается её обновлением (или в отдельный класс засунуть??)

NetworkMaster - класс, работающий с сетью. Выполняет задачи по требованию.
У нас вначале будет синхронизировать базу с сервером. Разумеется, запускается по заявке в отдельном потоке.

ActualDatabaseService - фоновый сервис, который отвечает за актуальность базы и других данных.
Сам будет принимать новые данные, или вызовет Networkmaster - хороший вопрос на конец мая.

